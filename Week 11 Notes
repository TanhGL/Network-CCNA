IPv6 ACL Access Control List
- 1st line of defence... should also have IPS Intrusion Prevention System, Firewall, Protocol analyzers
- Permit or deny traffic in your network

**IPv6 CCNA focus
- Use IPv6 to filter IPv6 packets received & transmitted via Routers

IPv6 IPv4 ACL similarities
> ACL can match on 
- Source/Destination IP Address
- Individual host address
- Subnets in both inbound/outbound
- Protocols (TCP, UDP, Port #)
- ICMP message
*Both uses implicit deny/deny all statement at the end
*Cannot copy IPv4 ACLs to IPv6 ACLs

IPv6 IPv4 ACL differences
1)
- IPv6 ACL and IPv4 ACL are independent of each other (i.e. the same source can be allowed in IPv6A ACL, but denied on IPv4 ACL)
2)
- IPv6 ACL has "Implicit Permit", IPv4 ACL does not, only has "Implicit Deny"/"Deny any any" (which IPv6 also have)
3)
**IPv4 ACL uses NAME/NUMBER (recall Standard (filter Source ONLY) = 1-99, Extended (filter Source and Destination) = 100-199)
**IPv6 ACL only use NAMES (Standard and Extended are still used, but using WORDS instead)
4)
- IPv4 match on Precedence, ToS Type of Service, TTL, fragments
- IPv6 match on Flow label, DSCP, Extentions and option header values
5) 
- IPv4 ACL match on /22,/23,/24,/25
- IPv6 ACL match on a hex-digit boundary /48,/52,/56,/64

~ICMPv6
- Remember, ARP was used to determine MAC address of neighbor, ARP no longer used in IPv6 
**ARP (IPv4) == ICMPv6 (IPv6), you dont want to block ICMPv6 as it provides basic IPv6 functionality (Neighbor Discovery Protocol NDP & Path MTU Discovery)

==Show ACL==
R2#show ipv6 access-list

==Configure ACL==
> Permit - any traffic with 2001:1::/64
R2(config)#ipv6 access-list acl1
R2(config-ipv6-acl)#permit 2001:1::/64 any
> Deny - all traffic except for acl1
R2(config-ipv6-acl)#int g0/0
R2(config-if)#ipv6 traffic-filter acl1 in [inbound]
==Extended ACL==
> Permit - ping (ICMP) with 2001:1::/64
R2(config)#ipv6 access-list acl2
R2(config-ipv6-acl)#permit icmp 2001:1::/64 any
> Permit - telnet (TCP) any any
R2(config-ipv6-acl)#permit tcp any any

==Enable Telnet==
R3(config)#line vty 0 4
R3(config-line)#transport input all
R3(config-line)#password cisco
R3(config-line)#exit
R3(config)#enable password cisco

VPN Virtual Private Network
- Low cost (expensive lease lines previously), high bandwidth
- Send traffic securely (private information - encrypted) over an insecure medium (internet)

Cleartext Protocols (FTP, Telnet, SMTP, HTTP, SNMPv1)

Cryptography Algorithms
1) Cipher 
- Encryption algorithm (ex. Symmetric - DES, 3DES, AES, Blowfish)
- Put cleartext data into non-readable forms
2) Symmetric Algorithm
- Same key used for encryption and decryption (ex. Secret Key)
3) Asymmetric Algorithm
- Diff key used for encryption and decryption (ex. Public Key)

4 goals of protecting data
1) Confidentiality - no one should be read the data
2) Integrity - data has traversed unchanged between 2 parties
3) Origin Authentication - protected data could only have originated from sender
4) Antireplay protection - verify that each packet is unique and not duplicated

Caesar algorithm
ex. MJQQT -> HELLO
Algorithm = move data to the rigth
Key = 5
> Hacker would ned to know algorithm and key

Keylength/Keyspace
- Total # of all combinations
- The larger this keylength/keyspace is, harder it is to crack

---(1)--- Data confidentiality
3 Types of Symmetric Algorithm
**Algorithms not on CCNA, but good for understanding for VPN
1) DES
- 1975 Created by IBM
- Do not use in today's environment
- 1 set of key
- Fixed key length = 56bits (2^56 combinations)
- Suspectible to Brute Force > 1998 decrypted in 56hours, 1999 decrypted in over 22hours
2) 3DES 
- 3 sets of keys
1) Encrypt with Key 1
2) Decrypt with Key 2
3) Encrypt with Key 3
- If Key1 = Key3 -> 112bit key length
- If Key1 =/= Key3 -> 168bit key length
3) AES
- Recommended for today's environment
- Good for bulk encryption

Asymmetric algorithm
**Algorithms not on CCNA, but good for understanding for VPN
- Uses different key to decrypt and encrypt
Steps:
1) Router generate private key (cannot be generated from public key) - not shared
2) Router generate public key (can only be generated from private key) - shared
-> Private key can only be decrypted by your public key
<- Public key can only be decrypted by your private key
TLDR: If A wants to send something to B, then A will encrypt the data with B's public key, then B will use their private key to decrypt what they got from A. Similarly, if B wants to send something to A, then B will encrypt the data with A's public key, then A will use their private key to decrypt what they got from B.

*Diffie Hellman DH
- Key Exchange - AES, 3DES, DES securely, over insecure medium (internet)
- Public Key Algorithm
3 set of keys (longer key length, the more secure, downside, more processing power is required)
1) DH1 - 768bits
2) DH2 - 1024bits
3) DH5 - 1536bits

---(2)--- Data Integrity
- Ensure data has not been tampered with by using Hash, trap-door, digest (1 way algorithm - cannot be reversed)
- Converts to fix length hash MD5 - 128bit or SHA Secured Hash Algorithm (more secure than MD5) SHA-3 > SHA-2 > SHA-1 > MD5
**HMAC Hash Message Authentication Code
HMAC Hash Message Authentication Code Procedure
1) Host A sends secure msg (X) to Host B with a Hash Value (Y) to compare
2) Host B can confirm there was no tampering of data because B can hash (X) and make sure (Hash X) == (Y)
3) To prevent a hacker from tampering with Y because Hacker could change both (X) and (Y) in the message, Host A and Host B knows a secure HMAC
4) Therefore, msg (X) + (HMAC) == Z -> Hash would be the final Hash that Host B needs to compare. Therefore, Host A sends (X) and (Z), and Host B can confirm (Z) by hashing (X) and (HMAC)

---(3)--- Data Authentication
- Ensure data is from claimed sender (session hijacking)
1) Pre shared Key (PSK)
- Secret key value entered into each peer manually and is used to authenticate peer
2) RSA Signatures (PSK with a private key)
- Encrypt the hash with a private key
- Similar to (1) Pre shared Key, but taking it 1 step further with Host A encrypting the hash with his/her Digital Signature with Host A's private key, then Host B has Host A's public key, decrypts the Digital Signature, and then Host B can compare Host A's hash

Certificate of Authority
- But what stops below?
Host A -> Host A Public Key -> Host B
Host A -> Host A Public Key -> Hacker -> Fake Host A Public Key -> Host B
Answer: Certificate of Authority - trusted 3rd party (a.k.a PKI Public Key Infrastructure)

PKI Public Key Infrastructure - trust
-> Host A trust PKI (X), Host B trusts (X), therefore Host B trusts Host A
<- Host B trust PKI (X), Host A trusts (X), therefore Host B trusts Host A
<-> Host A trust Host B

IPSec IP Security
- Network layer protocol (IP Sec Protocols) - Layer 4
- Protects and authenticates IP packets

IPSec Protocols
1) Internet Key Exchange (IKE)
- Framework for negotiating security parameters and establishing authenticated keys
2) Authentication Header (AH)
- No Encryption
- Authentication 
- Integrity
3) Encapsulating Security Payload (ESP)
- Encryption
- Authentication 
- Integrity

IPSec Modes
1) Transport Mode
- Original IP header of packet is used to transport packet
2) Tunnel Mode
- Original IP header of packet not used to transport packet, a new IP header is tagged in front (using  its peer devices' IP Address)

**Common: ESP with Tunnel Mode
ex. PC1 (IP: X) <-> R1 (IP: A) <-> Internet <-> R2 (IP: B) <-> PC2 (IP: Y) 
1) [SA: X][DA: Y]
2) [ESP][SA: A][SA: B]
Original IP header is not used

IPSec Framework - IKE Internet Key Exchange
1) IPSec Protocol 
[ESP] or [AH] or [ESP + AH]
2) IPSec Mode
[Transport Mode] or [Tunnel Mode]
3) Encryption (Algorithm)
[DES] or [3DES] or [AES]
4) Authentication (Integrity)
[MD5] or [SHA]
5) DH (Key Length)
[DH1] or [DH2] or [DH5]

VPN Types
*Benefit... no leased line. Therefore, Cost Savings, Security, Scalability
1) Site to Site VPN
2) Remote Access IPSec VPN (Shirley)
- PC Software required
3) Remote Access SSL VPN 
- No PC Software required
**CCNA - not required to know how to setup IPSec VPN

GRE Generic Routing Encapsulation (Tunneling)
> PC1 (IP: X) <-> R1 (IP: A) s2/0 <-> Internet <-> s2/0 R2 (IP: B) <-> PC2 (IP: Y) 
> [PC1 to send packet to PC2] R1 will encapsulate the packet in GRE, R2 will decapsulate the packet and send it to PC2
- Point-to-Point tunnel - similar to a Serial Link (hence, no authentication or encryption provided)
- Multiple higher layer protocols IPv6, IPv4, IPX
- Multicast Routing Protocols available
- GRE encapsulates other traffic within 20byte IP Header, 4byte GRE header

GRE Generic Routing Encapsulation Header
[Delivery Header][GRE Header][Payload packet]
- When tunneling, ONLY Delivery Header will be read
*Because of additional Header in GRE (Delivery and GRE), MTU is reduced
*[Payload packet] is the original header

==Show Tunnel==
R1#show run int tun 0
R1#show int s2/0 | i MTU

==Configure GRE Tunnel==
> PC1 (IP: X) <-> R1 (IP: 4.1.1.1) s2/0 <-> Internet <-> s2/0 R2 (IP: 4.1.2.2) <-> PC2 (IP: Y) 
> PC1 (IP: X) <-> R1 [Tunnel: 10.1.3.1 --- 10.1.3.2 :Tunnel] R2 <-> PC2 (IP: Y) 
**Encapsulates IPv4 packet (10.1.3.1, 10.1.3.2) within GRE within an IPv4 Packet (4.1.1.1, 4.1.2.2)
**Must configure both sides
> R1 
R1(config)#interface tunnel 0
R1(config-if)#ip address 10.1.3.1 255.255.255.252
R1(config-if)#tunnel mode gre ip [IPv4]
R1(config-if)#tunnel source 4.1.1.1
R1(config-if)#tunnel destination 4.1.2.2
> R2
R2(config)#interface tunnel 0
R2(config-if)#ip address 10.1.3.2 255.255.255.252
R1(config-if)#tunnel mode gre ip
R1(config-if)#tunnel source 4.1.2.2
R1(config-if)#tunnel destination 4.1.1.1
**Note, PC1 will not be able to get to PC2 via the tunnel, EIGRP must be enabled on R1 and R2 such that the route R2 <-> PC2 will be advertised to R1
R1(config)#router eigrp 100
R1(config-router)#network 10.0.0.0 [this will enable tunnel interface on 10.X.X.X, but not on 4.Y.Y.Y]
R1(config-router)#no auto-summary [this allows, 10.X.X.X instead of classful A addresses because we have both 10.1.3.X and 10.1.1.X (not here)]
R2(config)#router eigrp 100
R2(config-router)#network 10.0.0.0
R2(config-router)#no auto-summary

DMVPN Dynamic Multipoint VPN
**CCNA, do not need to know DMVPN
- Solves problems with Point-to-Point GRE Tunnels
> ex.
1) Labour and Troubleshooting intensive - 500 sites connecting to one central site, requires 500 GRE tunnels (configure both sides)
2) Complicated configuration - GRE tunnel does not provide authentication or encryption, therefore GRE have to be encapsulated within IPSec
- DMVPN has 1 single tunnel interface that connects the central site to multiple site
- DMVPN allows these multiple sites (Spokes) to automatically setup tunnels with each other (other Spokes) via NHRP Next Hop Resolution Protocol to discover new nodes
ex. Central Site <-> NHRP <-> Many spokes, then spokes setup tunnels with each other
- DMVPN like GRE is encapsulated within IPSec to provide authentication and encryption

Hypervisors - Hardware with Virtual Servers (ex. VMWare)

NFV Network Functions Virtualisation
- Virtualize Network devices and Network Functions and physical appliances
i.e. Virtualize device: routers instead of using physical router
i.e. Virtualize function: HSRP function instead of using a full OS to run this single function
~ Microsegmentation - segment your network into tiny subnets/segments to reduce broadcast, increase security (ex. run Firewall in front of every virtual server)

SDN Software Defined Networking - 3 visions
1) OpenSDN - Original vision at Stanford
- "The physical separation of network control plane from forwarding plane, and where a control plane controls several devices"
2) "SDN via Overlays" vision: "NSX from VMWare" 
- Virtual network overlays a Physical network (underlay Network)
3) Brite Box / White Box SDN: "Pica8, Cumulus Networks" 
- Run OS that can be installed on multiple devices 
(X) Don't buy Proprietary hardware, OS, features
(Y) Buy Switches that are not tied to a specific vendor (Facebook Switches: 6 pack wedge - open modular switch)
4) SDN via APIs Application Program Interfaces
- Using APIs instead of traditional CLIs
5) Open Stack
- Manage all of networking devices, servers, storage from a single management console
6) NFV Network Function Virtualization
(X) Don't run specific hardware on specific OS
(Y) Virtualize networking devices/functions/OS, rather than having a specific device performs that one function

OpenSDN vs OpenFlow
- Microsoft: OpenSDN is used to overcome traditional problems of networking
- NSA: OpenFlow is used to provide simplicity to the current network and provide more control
