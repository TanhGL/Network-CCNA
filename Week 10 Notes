==Check Cabling DCE/DTE==
R1#show controller serial 0/1/0
==Set clock speed and bandwidth==
**Note. Clock speed can only be done on DCE. Bandwidth is fine on noth DTE and DCE
R1(config)#int s0/1/0
R1(config-if)#clock speed 64000
R1(config-if)#bandwidth 64

Cisco Default Encapsulation = HDLC High-level Data Link Control
**Point-to-point link/back-to-back , Encapsulation between two connected interfaces must match but can change on different connected links
**Point-to-point/back-to-back link, DTE interfaces must have bandwidth, DCE interfaces must have both bandwidth and clock rate
**MAC addresses are used on Ethernet Segment, but not used on HDLC (HDLC will reference which higher level protocol will be used - IPv4, IPv6)

HDLC High-level Data Link Control (Industry Standard)
[Flag][Address][Control][Data][FCS]
- Layer 2 encapsulation
- Leased Line

Cisco HDLC High-level Data Link Control (Proprietary)
[Flag][Address][Control][TYPE][Data][FCS]
**By default, Cisco routers use HDLC for encapsulation
- HDLC with a "Type" field
- Allow multiple higher layer protocol to traverse at the same time (IPv4 and IPv6)
R1(config)#int s1/0
R1(config-if)#ip address 10.1.2.1 255.255.255.252
R1(config-if)#encapsulation HDLC

==Setup HDLC between 2 routers==
**Notice, no configuration required because HDLC is enabled by default
R1 s2/0 <-> s2/0 R2
R1(config)#int s2/0
R1(config-if)#10.1.2.1 255.255.255.252
R1(config-if)#no shut
R2(config)#int s2/0
R2(config-if)#10.1.2.2 255.255.255.252
R2(config-if)#no shut

Protocols:
Unicast = (0x0f)
CDP = (0x2000)
IPv4 = (0x0800)
IPv6 = (0x86dd)

PPP Advantages
- Multiple Vendors 
- Multiple Protocols simultaneously (IPv4, IPv6)
- Authentication and multilink (present multiple interfaces (physical interfaces) as a single link to higher protocols (IPv4 would think it is a single link))

PPP Authentication
- Layer 2 similar to HDLC
1) PAP Password Authentication Protocol (clear text)
2) CHAP Challenge Handshake Authentication Protocol (MD5 Hash)

PPP Protocols
1) LCP Link Control Protocol
- Manages features (authentications, multilink)
2) NCP Network Control Protocol
> Allow multiple higher layer protocols to traverse single link by using NCP
> NCP for IPv4 = IPCP
> NCP for CDP = CDPCP
> NCP for IPv6 = IPv6CP
- Therefore, to use both IPv4 and IPv6, PPP would need to use both IPCP and IPv6CP
**Again PPP is Layer 2 Protocol, therefore in order to support Layer 3 IPv4 and IPv6, must use a single leased line with the help of IPCP and IPv6CP

PPP 3 phases of link establishment
1) Link establishment phase
- PPP devices send LCP packets to configure and test the Data Link (negotiate which authentication method (PAP, CHAP), multilink?)
2) Authentication Phase (OPTIONAL)
- Device to choose PAP? CHAP? both?
3) Network Layer Protocol Phase
- Devices choose to use IPv4? IPv6? both?

PPP PAP
- Requires ONLY password
- Cleartext Password
- Remote peer is in control of authentication attempt (no protection from repeated attempts)
- router's running config (local database) stores the usernames/passwords

PPP CHAP Challenge Handshake Authentication Protocol
**CCNA level, make sure hostnames are configured correctly
- Requires username and password
- MD5 Hash (hash data to 128bit value) - aka Trap door (you cant take hash value and come up with original value)

PPP CHAP Process
> R1 wants to authenticate with R2 (challenger)
1) R2 sends CHAP challenge Packet to R1
[CHAP challenge packet type identifier][identifier id][random #][nameOfSender]
*R2 might be challenging multiple remote devices, therefore needs [identifier id] to keep track
*[random #] stops playback attacks
**2) R1 receives the challenge, enters passsword
3) R1 will then hash the 3 fields together MD5# = [password + identifier id + random #]
4) R1 sends the 3 fields back to R2, inserting MD5# where random# was
5) R2 will compare the Z to its hash

==TLDR==
R1 <- R2
**[id] is kept
--1) [01][id][random][R2]--
R1 -> R2
--2) [02][id][MD5#][R1]--

PPP Two authentication method (using both PAP and CHAP)
- Only one of the authentication methods will ever be used but you can have the other on standby
i.e. R1 (PAP, then CHAP) - R2 (CHAP), then CHAP will be used
i.e. R1 (CHAP, then PAP) - R2 (CHAP), then CHAP will be used
i.e. R1 (CHAP, then PAP) - R2 (PAP), then PAP will be used
i.e. R1 (PAP, then CHAP) - R2 (PAP, then CHAP), then PAP will be used, CHAP will not be used

***CHAP, routers use their hostname for authentication
***CHAP, passwords must be the same for both sides
*If username/password is changed after successful login, no error

==PPP PAP username/password==
R1 s2/0 <-> s2/0 R2
> Create R1 local user
R1(config)#username User2 password cisco
> Create R2 local user
R2(config)#username User1 password cisco
> Config R1 encapsulation
R1(config)#int s2/0
R1(config-if)#encapsulation ppp
R1(config-if)#ppp authentication pap
R1(config-if)#ppp pap sent-username User1 password cisco 
> Config R2 encapsulation
R2(config)#int s2/0
R2(config-if)#encapsulation ppp
R2(config-if)#ppp authentication pap
R2(config-if)#ppp pap sent-username User2 password cisco 

==PPP CHAP username/password==
> Create R1 local user
R1(config)#username R2 password cisco
> Config R1 encapsulation
R1(config)#int s2/0
R1(config-if)#encapsulation ppp
R1(config-if)#ppp authentication chap
> Create R2 local user
R2(config)#username R1 password cisco
> Config R2 encapsulation
R2(config)#int s2/0
R2(config-if)#encapsulation ppp
R2(config-if)#ppp authentication chap

Multilink PPP
- Makes 2 or more serial links appear as a single physical link
- If one of the links go down, multilink will still be up. If all links go down, then multilink goes down
- Accomplished via "Virtual Multilink Interface" by fragmenting packets across both links
ex. PC1 -> R1 s0/0 & s0/1 R2 -> PC2, R1 will fragment a packet onto the 2 links, then R2 will join them back again to continue transmission to PC2 - PC2 would not know fragment took place
- Multilink used to be used on single physical links, because it provides fragmentation
- Wireshark will show errors about fragments (if 2 or more links), but it will fail checksum. However, when all links are disabled down to 1 link, then there will be no error, because on a single link, no fragmentation will take place
- Fragmentation/Reassemble is based on "Sequence number" in the Multilink Protocol

==Configure PPP Multilink==
> R1 s2/1 10.1.4.1 <-> s2/1 10.1.4.2 R2
> R1 s2/0 10.1.2.1 <-> s2/0 10.1.2.2 R2
**Note. Neighbor relationship must be established first, i.e. EIGRP have to be enable
R1(config)#interface multilink 1 (randomNumber)
R1(config-if)#encapsulation ppp
R1(config-if)#ppp multilink
R1(config-if)#ip address 10.1.5.1 255.255.255.252
R1(config-if)#ppp multilink group 1
R1(config-if)#int s2/0
R1(config-if)#ppp multilink group 1
R1(config-if)#int s2/1
R1(config-if)#ppp multilink group 1
R2(config)#interface multilink 1 (randomNumber)
R2(config-if)#encapsulation ppp
R2(config-if)#ppp multilink
R2(config-if)#ip address 10.1.5.2 255.255.255.252
R2(config-if)#ppp multilink group 1
R2(config-if)#int s2/0
R2(config-if)#ppp multilink group 1
R2(config-if)#int s2/1
R2(config-if)#ppp multilink group 1

PPPoE Point-to-Point over Ethernet
**Does not encrypt in PPPoE Tunnel (cleartext)
> PPPoE Client <-(DSLAM Digital Subscriber Line Multiplexer & PPP Tunnel)-> PPPoE Access Server

==Configure PPPoE Client==
> PPPoE client g0/0 <-> g0/0 PPPoE server
> Assume PPPoE Server is setup and ready for PPPoE Client
**int dialer 1, even when interface is shut down, it will still show as up/up
Client(config)#int dialer 1 [spoof an interface as up, even though it is down - keeps routing protocols]
Client(config-if)#ip address negotiated [Server will allocate IP address to Client via PPP]
Client(config-if)#encapsulation ppp
Client(config-if)#mtu 1492 [Maximum transmission unit - often 1500, we set it lower due to addition PPP headers]
Client(config-if)#ppp chap hostname david
Client(config-if)#ppp chap password cisco
Client(config-if)#dialer pool 2
> Configure g0/0
Client(config-if)#int g0/0
Client(config-if)#no ip address
Client(config-if)#pppoe-client dial-pool-number 2
Client(config-if)#pppoe enable
Client(config-if)#exit
Client(config)#ip route 0.0.0.0 0.0.0.0 dialer 1
Client(config)#ip domain-lookup
Client(config)#ip name-server 8.8.8.8
==Show PPPoE Session==
Client#show pppoe session
==Show dialer 1==
Client#show int dialer 1
==Show virtual interface (from dialer 1)==
> Notice, the configuration is from Dialer 1, we didn't configure this
**Virtual interfaces will go down when dialer goes down
Client#show int virtual-access 2 configuration
Client#show run int dialer 1
Client#show run int virtual-access 2

IP SLAs Service Level Agreement
- SP provides a certain level of agreement (i.e. ICMP traffic/Voice traffic)
> Cisco routers can generate/mimic voice traffic to test SLA

IP SLAs Cisco Router
**IP SLA cannot be changed in Cisco routers, they must be deleted and readded

==Setup Tracking - IP SLA==
> R1 g0/1 10.1.2.1 <-> R2 <-> f0/0 10.1.6.1 R6
> R1 g0/2 10.1.3.1 <-> R2 <-> f0/0 10.1.6.1 R6
> Setup ping test
> When it goes above threshold of 50, interface goes down
R1(config)#ip sla 1
R1(config-ip-sla)#icmp-echo 10.1.6.2 source-ip 10.1.1.1
R1(config-ip-sla-echo)#frequency 5
R1(config-ip-sla-echo)#threshold 50
R1(config-ip-sla-echo)#exit
R1(config)#ip sla schedule 1 life forever start-time now
> Create tracking object
R1(config)#track 1 ip sla 1
R1(config-track)#track 1 ip sla 1
> Rechecks every 5 seconds for threshold to determine up/down
R1(config-track)#delay down 5 up 5
R1(config-track)#exit
R1(config)#ip route 10.1.6.0 255.255.255.0 10.1.2.2 track 1 [Using SLA1, route will be removed when we are below SLA threshold]
R1(config)#ip route 10.1.6.0 255.255.255.0 10.1.3.2 2 [Setting administrative distance of 2, route will be used when we exceeded SLA threshold]
==Show SLA==
> ms should be less than 50ms, because we set threshold to be 50
> If yes, then will use track 1, otherwise will use 10.1.3.2
R1#show track 1
R1#show ip sla summary

BGP Border Gateway Protocol
**CCNA needs to know - eBGP (External Border Gateway Protocol) configuration between [A] Enterprise Server and [B]ISP Server using single internet link
**CCNA: 3 types of eBGP connections
1) Dual Homed connection - 2 connections between [A] and [B]
2) Single Multihomed connection - 1 connection [A] to [B]1 and 1 connection [A] to [B]2
3) Dual Multihomed connection - 2 connections [A] to [B]1 and 2 connections [A] to [B]2

BGP Border Gateway Protocols vs IGP Interior Gateway Protocols
> IGP (within AS) = OSPF, EIGRP
> BGP (between AS) = 
- BGP is the only protocol used on the internet
- BGP runs the internet
- BGP chooses best routes based on metric/criteria 
- BGP needs to converge (when there is a change - add/remove/change/replace)
- BGP routing tables are huge and increasing (all routes on the internet) 
**BGP relationship is not automatic, manual configuration is required on both routers. BGP runs on Layer 7, therefore not on an interface. Whereas IGP such as EIGRP, IGP runs on Layer 3/4 and therefore are configured automatically
- BGP (admin distance) = 200
- OSPF (admin distance) = 110

iBGP vs eBGP
- iBGP - inside same AS but still routers on the internet
- iBGP - advertise itself with Loopack
- eBGP - different AS
- eBGP - advertise itself with the physical connected interface

BGP Neighbor states
1) Idle
- No connection to neighbor (neighbor shutdown)
2) Connect
- TCP connection has been attempted, but hasn't been completed
3) Active (Not working!)
- TCP connection has been completed, no BGP messages have been sent
4) Opensent 
- TCP connection exists, router is trying to create connection to neighboring device
5) Openconfirm
- TCP connection exists, local router had receive a message back from neighboring router
6) Established
- Both router and neighboring router has agreed to form relationship. Now they can exchange messages with each other

==Show BGP Routes==
PC>#telnet route-views.routeviews.org
R1>sh ip bgp sum
R1>sh ip route sum
> # of IP routes = Networks + Subnet
> 197993 Networks, 458350 Subnets = 656,343 routes
*Changes all the time

==Configure iBGP==
**BGP relationship is not automatic, manual configuration is required on both routers
> R1
**Just because BGP is setup, does not mean routes are automatically advertised, it must be redistribute it or manually advertise
**Router ID is its loopback address (automatically)
*Use loopbacks for Router IP Address
*If "State" is blank, it is running (misleading)
*Same AS
*Even thought, same AS, still use remote-as
R1 17.17.17.1/32 loopback <-> R2 17.17.17.2/32 loopback
R1(config)#router bgp 17
R1(config-router)#neighbor 17.17.17.2 remote-as 17
R1(config-router)#neighbor 17.17.17.2 update-source loopback 0 [when R1 wants to send to 17.17.17.2, it uses its loopback 0 as the source - this way, 17.17.17.2 expects R1's loopback address to send traffic to 17.17.17.2 and not a random interface] 
> OSPF is used for internal routers, they must be enabled
R1(config-router)#router ospf 1
R1(config-router)#network 0.0.0.0 255.255.255.255 area 0
> If want to advertise a specific ospf network (i.e. 8.1.2.1), then... R1(config-router)#network 8.1.2.1 0.0.0.0 area 0
> R2, does not want to advertise itself to the internet, hence only 17.0.0.0 was used
R2(config)#router ospf 1
R2(config-router)#network 17.0.0.0 0.255.255.255 area 0
R2(config-router)#router bgp 17
R2(config-router)#neighbor 17.17.17.1 remote-as 17
R2(config-router)#neighbor 17.17.17.1 update-source loopback 0
==Advertise routes in BGP (redistribute - basically... advertising all of your routes)==
R1(config-router)#network 17.1.1.0 mask 255.255.255.0
R2(config-router)#network 17.17.17.0 mask 255.255.255.255 
R2(config-router)#network 17.17.17.2 mask 255.255.255.255 

==Configure eBGP==
**Notice, no "update-source" is needed on eBGP
> R1 <-> R2 s2/0 8.1.1.1/30 (AS17) <-> R3 8.1.1.2/30 s2/0 (AS8)
> R2
R2(config)#router bgp 17
R2(config-router)#neighbor 8.1.1.2 remote-as 8
**R2 needs to advertise this network, otherwise R1 will not know how to get to R3
R2(config-router)#network 8.1.1.0 mask 255.255.255.252
> R3
R3(config)#router bgp 8
R3(config-router)#neighbor 8.1.1.1 remote-as 17
R3(config-router)#network 8.1.1.0 mask 255.255.255.252 [Optional]

==Force 1-BGP path over another==
> Instead of going x.x.x.x, we want it go to y.y.y.y by increasing weight to 1000 - default weight is 0
R1(config)#router bgp 17
R1(config-router)#neighbor x.x.x.x weight 1000 
R1(config-router)#exit
R1#clear ip bgp x.x.x.x
> Confirm weight has changed
R1#show ip bgp
R1#show ip bgp neighbor
R1#show run | section bgp
R1#show ip proto
R1#show tcp brief

***BGP - TLDR***
*Internal BGP, not on CCNA exam
1) Both Internal and External BGP
- Uses remote-as "neighbor y.y.y.y remote-as 17"
- Advertise its networks in exact subnet mask
- When selecting router bgp XX, XX refers to its own bgp 
2) Internal BGP - in addition to (1)
- uses OSPF/routing protocols interfaces connecting 2 internal routers
- uses Loopback as its source "neighbor x.x.x.x update-source loopback 0"
3) Administrative Distances
eBGP - 20
iBGP - 200
4) eBGP, iBGP
- eBGP runs outside of AS (different AS #)
- iBGP runs within AS (same AS #)
5) Quick ex. R3 15.1.1.1 /24 <-> R4 15.1.1.2 /24
R3(config)# router bgp 65002
R3(config-router)#neighbor 15.1.1.2 remote-as 65002
R3(config-router)#network 15.1.1.0 mask 255.255.255.0
R4(config)# router bgp 65002
R4(config-router)#neighbor 15.1.1.1 remote-as 65002

MPLS (1) Multiprotocol (2) Label (3) Switching
**Troubleshooting not on CCNA
- (1) Multiprotocol means support IPv4, IPv6, Layer 2
- (3) Switching from one interface/protocol to another on a router using Labels (2)
- 2 mains uses: Layer 3 VPNs and Layer 2 VPNs
- In Layer 3 used to seperate customer traffic by IP, similar to VLAN seperates traffic in Layer 2

~ASICs Application Specific Integrated Circuits

MPLS Layer3 VPN ex.
> EdgeDevice1 <-> R1 <-> R2 <-> R3 <-> R4 <-> EdgeDevice2
- Traditionally, all ED1, ED2, R1-4 would need to know how to send/receive traffic if we were to send from ED1 to ED2. With MPLS, R2-3 does not need to know how to route ED1 to ED2, instead R1 would put a "Label" on the traffic with information to send to R4, R4 will know how to send it to ED2

MPLS Terminology
- LSR Label Switch Router
> EdgeDevice1 -> R1 -> R2 -> R3 -> R4 -> EdgeDevice2
R2, R3 = Provider Routers
R1, R4 = Provider Edge Routers (Connected to Provider and to Customers)
R1, R4 = Intermediate LSR
ED1, ED2 = Customer Edge Routers (VRF Virtual, Routing, and Forwarding - indicates Customer Virtual Network)
R1 = Ingress LSR a.k.a Edge LSR (Inserts a "Label" between Layer 2 Header and Layer 3 Header)
R4 = Egress LSR

MPLS LSP Label Switch Path
> EdgeDevice1 -> R1 -> R2 -> R3 -> R4 -> EdgeDevice2
1) ED1 sends packet to R1
2) R1 inserts a "Label" (i.e. 20) between Layer 2 header and Layer 3 header (aka Layer 2.5 Header) into the Egress Network (Outer Label)
3) R1 sends to R2
4) R2 swaps the Label to 21 (not sequential), then forwards it to R3
5) R3 swaps the Label to 22 (not sequential), then forwards it to R4
6) R4 strips the "Label" (Inner Label), then forwards to ED2 without a label in the Customer Network
**R1 -> R4, sends a label known as "Next Hop Label"

MPLS Traffic Engineering 
- OSPF does not load balance
- EIGRP does some unequal cost load balancing
*MPLS provides a lot of flexibility in load share traffic across multiple paths based on link utilization - reroute traffic based on 1) Load 2) Traffic Type
i.e. VoIP will take path 1, FTP will take path 2

MPLS Labels
- 32bit header inserted between Layer 2 and 3 Header
[20bit Label][3bit Experimental Field (QoS)][1bit Bottom-of-Stack indicator (Outer/Inner Label)][3bit Time-to-live (Stop Loops)]

OSPFv3
- 128bit IPv6 Addresses Compatible
- OSPFv3 vs OSPFv2 are independent of each other
- 

OSPFv3 vs OSPFv2 similarities
**OSPF does not require Area 0, if you only have 1 other area (i.e. Area 1)
- Link-state (LSA Link State Advertisements) routing protocols, same design concepts (Backbone area, Area border router, AS border routers, 32-bit router ID
- IP Protocol # 89

OSPFv3 vs OSPFv2 differences
- Separate databases, Different Addresses, they do not communicate with each other
> Activation
- OSPFv2 - use Network Command on interfaces
- OSPFv3 - go on interface and enable OSPF
> IP Address
- OSPFv3 - Uses IPv6 link local addresses for neighbor relationships
- OSPFv2 - Uses IPv4 interface IP Addresses for neighbor relationships 
> Advertisements
- OSPFv3 - Uses FF02::5 to advertise info to all OSPF routers, and FF002::6 to DR and BDR
- OSPFv2 - 224.0.0.5 and 224.0.0.6

**Make sure OSPF/EIGRP interfaces are not set to "Passive Interface"
**Passive Interface is useful for not forming relationships with external networks or        users
==Turn on Passive Interface globally (interface will not form neighbor relationships and send updates)==
R1(config)#ipv6 router ospf 1
R1(config-rtr)#passive-interface default
==Turn on Passive Interface individually==
R1(config-rtr)#passive-interface g0/0
R1(config-rtr)#passive-interface g0/1
> Undo above
R1(config-rtr)#no passive-interface g0/0
R1(config-rtr)#no passive-interface g0/1
==Similiarly on EIGRP==
R1(config)#ipv6 router eigrp 1
R1(config-rtr)#no passive-interface g0/0
R1(config-rtr)#no passive-interface g0/1

==Show OSPFv3==
R1#show ipv6 ospf database
R1#show ipv6 ospf int
R1#show ipv6 ospf neighbor
R1#show ipv6 protocols
R1#show ipv6 router

==Ping IPv6==
**Both works
R1#ping ipv6 2001:FACE:1::1
R1#ping 2001:FACE:1::1

==Configure OSPFv3==
[Area 1: R1 G0/0 <-> G0/0 R2]<->[Area 0: R2 G0/1 <-> G0/0 R3]<->[Area 2: R3 G0/1 <-> R4 G0/0]
> R1 Initial Setup
R1(config)#int loop 0
R1(config-if)#ipv6 address 2001:FACE:1::1/64
R1(config-if)#int g0/0
R1(config-if)#ipv6 address 2001:1::1/64
R1(config-if)#no shut
R1(config-if)#end
> Enable IPv6 routing
R1(config)#ipv6 unicast-routing
R1(config)#ipv6 router ospf 1 (**Remember, this is arbitrary, other routers do not need to use the same number!)
R1(config-rtr)#router-id 1.1.1.1
R1(config-rtr)#end
> Go into each individual interface to enable OSPFv3
R1(config)#int loop 0
R1(config-if)#ipv6 ospf 1 area 1
R1(config-if)#int g0/0
R1(config-if)#ipv6 ospf 1 area 1
> R2 Initial Setup
R2(config)#int loop 0
R2(config-if)#ipv6 address 2001:FACE:2::1/64
R2(config-if)#int g0/0
R2(config-if)#ipv6 address 2001:1::2/64
R2(config-if)#no shut
R2(config-if)#int g0/1
R2(config-if)#ipv6 address 2001:2::2/64
R2(config-if)#no shut
R2(config-if)#end
> Enable IPv6 routing
R2(config)#ipv6 unicast-routing
R2(config)#ipv6 router ospf 1
R2(config-rtr)#router-id 2.2.2.2
R2(config-rtr)#end
> Go into each individual interface to enable OSPFv3
R2(config)#int loop 0
R2(config-if)#ipv6 ospf 1 area 1
R2(config-if)#int g0/0
R2(config-if)#ipv6 ospf 1 area 1
R2(config-if)#int g0/1
R2(config-if)#ipv6 ospf 1 area 0
> R3
R3(config)#int loop 0
R3(config-if)#ipv6 address 2001:FACE:3::1
R3(config-if)#int g0/0
R3(config-if)#2001:2::3/64
R3(config-if)#no shut
R3(config-if)#int g0/1
R3(config-if)#2001:3::1/64
R3(config-if)#no shut
R3(config-if)#end
R3(config)#ipv6 unicast-routing
R3(config-rtr)#ipv6 routing ospf 1
R3(config-rtr)#route-id 3.3.3.3
R3(config-rtr)#int loop 0
R3(config-if)#ipv6 ospf 1 area 2
R3(config-if)#int g0/0
R3(config-if)#ipv6 ospf 1 area 0
R3(config-if)#int g0/0
R3(config-if)#ipv6 ospf 1 area 2
> R4
R4(config)#int loop 0
R4(config-if)#ipv6 address 2001:FACE:4::1/64
R4(config-if)#int g0/0
R4(config-if)#ipv6 address 2001:3::2/64
R4(config-if)#no shut
R4(config-if)#end
R4(config)#ipv6 unicast-routing
R4(config-rtr)#ipv6 routing ospf 1
R4(config-rtr)#router-id 4.4.4.4
R4(config-rtr)#int loop 0
R4(config-if)#ipv6 ospf 1 area 2
R4(config-if)#int g0/0
R4(config-if)#ipv6 ospf 1 area 2

==Configure OSPFv3 without IP address (uses link-local)==
> R1 g0/0 <-> g0/0 R2
> R1
R1(config)#ipv6 unicast-routing
R1(config)#ipv6 router ospf 1
R1(config-rtr)#router-id 1.1.1.1
R1(config-rtr)#end
R1(config)#int g0/0
R1(config-if)#ipv6 enable
R1(config-if)#ipv6 ospf 1 area 0
R1(config-if)#no shut
> R2
R2(config)#ipv6 unicast-routing
R2(config)#ipv6 router ospf 1
R2(config-rtr)#router-id 2.2.2.2
R2(config-rtr)#end
R2(config)#int g0/0
R2(config-if)#ipv6 enable
R2(config-if)#ipv6 ospf 1 area 0
R2(config-if)#no shut
[Optional] Proof that it works (R1 able to ping R2)
> R1
R1(config)#int loop 0
R1(config-if)#ipv6 address 2001:FACE:1::1/128
R1(config-if)#ipv6 ospf 1 area 0
> R2
R2(config)#int loop 0
R2(config-if)#ipv6 address 2001:FACE:2::2/128
R2(config-if)#ipv6 ospf 1 area 0

IPv6 EIGRP
- Advanced Distance Vector routing protocol (Link State)
- [Diff] To form neighbor relationships, uses Link-local addresses, no longer uses neighbor's IP address
- [Diff] To enable EIGRP on an interface, you must now specify it on the interface. Network command no longer used
- [Same] Use "Dual Algorithm" for best path to destination network
- [Same] Use RTP Reliable Transport Protocol to send updates/acknowledgements
- [Same] Use Multicast FF02::A (10) == 224.0.0.10 for updates - No longer Broadcast
- [Same] Support both equal and unequal cost load balancing - topology and neighbor tables are both created

==Configure IPv6 EIGRP==
***AS# must match
> Do this for each router
> Once configured, setup IP addresses and they will be able to ping each other
R1(config)#ipv6 unicast-routing
R1(config)#ipv6 router eigrp 1 [AS]
R1(config-rtr)#eigrip router-id 1.1.1.1
R1(config-rtr)#no shut
R1(config-rtr)#int g0/0
R1(config-rtr)#ipv6 eigrp 1
R1(config-rtr)#int loop 0
R1(config-rtr)#ipv6 eigrp 1
R2(config)#ipv6 unicast-routing
R2(config)#ipv6 router eigrp 1 [AS]
R2(config-rtr)#eigrip router-id 2.2.2.2
R2(config-rtr)#no shut
R2(config-rtr)#int g0/0
R2(config-rtr)#ipv6 eigrp 1
R2(config-rtr)#int loop 0
R2(config-rtr)#ipv6 eigrp 1

==Show commands==
> Check eigrp is enabled on interfaces
R1#show ipv6 eigrp int
R1#show ipv6 eigrp neigh
R1#show ipv6 route eigrp







